import os
import logging
import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7990633748:AAGI2aInnuvBoODhK5hglwJwIjxP_jrzQTw"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ª–æ–≤–∞–º–∏
file_path = "english_words_fully_fixed.xlsx"  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

def load_words():
    if os.path.exists(file_path):
        return pd.read_excel(file_path).to_dict(orient='records')
    return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
words = load_words()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")]], resize_keyboard=True
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —É—á–∏—Ç—å —Å–ª–æ–≤–∞! –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'", reply_markup=start_keyboard)

@dp.message(Command("reload"))
async def reload_words(message: types.Message):
    global words
    words = load_words()
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω! üÜï")

@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_training(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = 0
    await send_next_word(message)

async def send_next_word(message: types.Message):
    user_id = message.from_user.id
    if user_progress[user_id] < len(words):
        word_pair = words[user_progress[user_id]]
        user_progress[user_id] += 1
        await message.answer(f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è: {word_pair.get('English', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ')}?")
    else:
        await message.answer("–í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! üéâ")

@dp.message()
async def check_translation(message: types.Message):
    user_id = message.from_user.id
    current_index = user_progress.get(user_id, 0) - 1
    if current_index < 0:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'")
        return
    
    correct_translation = words[current_index].get('Russian', '').lower().strip()
    if message.text.lower().strip() == correct_translation:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.")
        await send_next_word(message)
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {correct_translation}")

async def main():
    try:
        await dp.start_polling(bot, skip_updates=True)
    except asyncio.CancelledError:
        logging.info("Polling was cancelled.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    if loop.is_running():
        loop.create_task(main())
    else:
        loop.run_until_complete(main())


